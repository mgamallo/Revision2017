import java.awt.AWTException;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Frame;
import java.awt.Robot;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.ListModel;

import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfStamper;
import com.itextpdf.text.pdf.PdfWriter;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * 
 * @author Coco
 */
public class VentanaA3 extends javax.swing.JFrame {

	public JButton jBDeshabilitar;
	private JPanel panelUtiles;
	private JButton jBSiguientePDF;
	private JButton jBGirar;
	private JButton jBCarpeta;

	/**
     * Creates new form VentanaA3
     */
	
	
    public VentanaA3(boolean soloA3) {
        initComponents();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
    	
    	setTitle("Revisión");
    	addKeyListener(listener);
    	setFocusable(true);

        jLNHC = new javax.swing.JLabel();
        Inicio.jBNHCp = new javax.swing.JButton();
        Inicio.jBServiciop = new javax.swing.JButton();
        jLServicio = new javax.swing.JLabel();
        Inicio.jBNombreDocp = new javax.swing.JButton();
        jLNombreDoc = new javax.swing.JLabel();
        jBcia = new javax.swing.JButton();
        jBhosp = new javax.swing.JButton();
        jBcons = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jCheckBox1 = new javax.swing.JCheckBox();
        jBFijarServicio = new javax.swing.JButton();
        jBFijarNombres = new javax.swing.JButton();
        
        jBDeshabilitar = new JButton();
        
        jBExtraer = new JButton("Extraer");
        jBApartar = new JButton("Apartar");
        jBEliminar = new JButton("Eliminar");
        jBGrabar = new JButton("Registrar");
        
        panelFinal = new JPanel(new FlowLayout());
        panelUtiles = new JPanel(new FlowLayout());
        
        jBSiguientePDF = new JButton("");
        jBGirar = new JButton("");
        jBCarpeta = new JButton("");
             
        jBGirar.setPreferredSize(new Dimension(50,20));
        jBSiguientePDF.setPreferredSize(new Dimension(50,20));
        jBCarpeta.setPreferredSize(new Dimension(70,30));
        
        
        panelUtiles.add(jBGirar);
        panelUtiles.add(jBSiguientePDF);
        panelUtiles.add(jBCarpeta);
        //panelUtiles.setPreferredSize(new Dimension(100,25));
        
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jLNHC.setText("NHC");

        Inicio.jBNHCp.setText("");
        Inicio.jBNHCp.setFont(new java.awt.Font("Serif", 1, 45)); // NOI18N
        Inicio.jBNHCp.setBackground(Color.green);
        Inicio.jBNHCp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        //  Inicio.jBServiciop.setEnabled(false);
        Inicio.jBServiciop.setText(Inicio.HOSP);
        Inicio.jBServiciop.setBackground(Color.pink);
        Inicio.jBServiciop.setFont(new java.awt.Font("Serif", 1, 20)); // NOI18N

        jLServicio.setText("Servicio");

        //  Inicio.jBNombreDocp.setEnabled(false);
        Inicio.jBNombreDocp.setText(Inicio.URPA);
        Inicio.jBNombreDocp.setToolTipText(Inicio.jBNombreDocp.getText());
        Inicio.utiles.encajarNombreNormalizado(Inicio.jBNombreDoc.getText());
        Inicio.jBNombreDocp.setBackground(Color.pink);
        Inicio.jBNombreDocp.setFont(new java.awt.Font("Serif", 1, 20)); // NOI18N

        jLNombreDoc.setText("Nombre Documento");

        jBcia.setText(Inicio.CIA);
        jBcia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	Inicio.jBServiciop.setText(Inicio.CIA);
            }
        });

        jBhosp.setText(Inicio.HOSP);
        jBhosp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	Inicio.jBServiciop.setText(Inicio.HOSP);
            }
        });

        jBcons.setText(Inicio.CONS);
        jBcons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	Inicio.jBServiciop.setText(Inicio.CONS);
            }
        });

        
        jList1.setBackground(new java.awt.Color(255, 241, 182));
        jList1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        
        String nombresA3[] = { Inicio.URPA,Inicio.CUIDADOS_INTENSIVOS };
        listaNombres = new DefaultListModel();
        for(int i=0;i<nombresA3.length;i++){
        	listaNombres.addElement(nombresA3[i]);
        }
        jList1.setModel(listaNombres);
        
        jList1.addMouseListener(new MouseAdapter() {
        	public void mouseClicked(MouseEvent e){
        		Inicio.jBNombreDocp.setText(jList1.getSelectedValue().toString());
        		
        		Inicio.jBNombreDocp.setToolTipText(Inicio.jBNombreDocp.getText());
        		Inicio.utiles.encajarNombreNormalizado(Inicio.jBNombreDoc.getText());
        	}
		});
        
        jScrollPane1.setViewportView(jList1);

        jCheckBox1.setText("Todos los documentos");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jBFijarServicio.setText("Fijar Servicio");
        jBFijarServicio.addActionListener(new ActionListener() {
			
 			@Override
 			public void actionPerformed(ActionEvent e) {
 				// TODO Auto-generated method stub
 				if(!Inicio.jBServicio.equals("X") && !Inicio.jBServicio.equals(Inicio.DES)){
 					renombraServicios();	
 					Inicio.jLServicios.setSelectedValue(Inicio.jBServicio.getText(), true);
 					Inicio.jLNombresDoc.setModel(Inicio.excel.getDocServicio(Inicio.jBServicio.getText()));
 				}

 			}
 		});

        jBFijarNombres.setText("Fijar Nombre");
        jBFijarNombres.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				renombraNombres();
			}
		});
        
        
		jBDeshabilitar.setText("Teclas On");
		jBDeshabilitar.setBackground(Color.pink);
		jBDeshabilitar.setToolTipText("Habilita/Deshabilita las teclas");
		jBDeshabilitar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				// jBEliminarActionPerformed(evt);
				habilitarTeclas(jBDeshabilitar.getText());
				requestFocus();
			}
		});
        
        
		jBExtraer.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				// jBExtraerActionPerformed(evt);
				
				habilitarTeclas(jBDeshabilitar.getText());
				
				if(Inicio.ventanaExtraer != null){
					Inicio.ventanaExtraer.dispose();
				}
				
				Inicio.ventanaExtraer = new VentanaExtraer();
				requestFocus();
			}
		});
        
		jBEliminar.setText("Eliminar");
		jBEliminar.setToolTipText("Elimina el documento");
		jBEliminar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				// jBEliminarActionPerformed(evt);

				Inicio.jBNHC.setText("Eliminar");
				Inicio.jBNHCp.setText("Eliminar");
				Inicio.jBServicio.setText("Eliminar");
				Inicio.jBServiciop.setText("Eliminar");
				Inicio.jBNombreDoc.setText("Eliminar");
				Inicio.jBNombreDocp.setText("Eliminar");
				Inicio.jBNombreDocp.setToolTipText(Inicio.jBNombreDocp.getText());
				Inicio.utiles.encajarNombreNormalizado(Inicio.jBNombreDoc.getText());

				Inicio.jBNHC.setBackground(Color.gray);
				Inicio.jBNHCp.setBackground(Color.gray);
				Inicio.jBServicio.setBackground(Color.gray);
				Inicio.jBServiciop.setBackground(Color.gray);
				Inicio.jBNombreDoc.setBackground(Color.gray);
				Inicio.jBNombreDocp.setBackground(Color.gray);

				requestFocus();
			}
		});
		
		jBApartar.setText("Apartar");
		jBApartar.setToolTipText("Aparta el documento");
		jBApartar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jBApartarActionPerformed(evt);
				requestFocus();
			}
		});
		
	
		jBSiguientePDF.setIcon(new javax.swing.ImageIcon(
				"iconos/Giro Derecha 24x24.png")); // NOI18N
		jBSiguientePDF.setToolTipText("Documento siguiente");
		jBSiguientePDF.setLabel("");
		jBSiguientePDF.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jBGrabarActionPerformed(evt);
				requestFocus();
			}
		});
		
        
        // panelFinal.add(botonExtraer);
		panelFinal.add(jBDeshabilitar);
        panelFinal.add(jBGrabar);
        panelFinal.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        
        
        jBGirar.setIcon(new javax.swing.ImageIcon("iconos/Giro.png")); // NOI18N
        jBGirar.setToolTipText("Rota la página");
		// jB180.setText("180 º");
        jBGirar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				new Acrobat().rotarPagina();
				requestFocus();
			}
		});
        
        jBCarpeta.setIcon(new ImageIcon("iconos/carpeta 32.png"));
        //jBCarpeta.setText("Carpeta");
        jBCarpeta.setToolTipText("Abre la carpeta actual");
        
        jBCarpeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	jBCarpetaActionPerformed(evt);
                //jPanel1.requestFocus();
            }
        });
        
        jBGrabar.setIcon(new ImageIcon("iconos/accept-32.png"));
        jBGrabar.setToolTipText("Graba todos los cambios de la carpeta");
        jBGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // jBGrabarActionPerformed(evt);
            	//registraCambiosFinales();
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(panelUtiles)
                    .addComponent(Inicio.jBNHCp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Inicio.jBServiciop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Inicio.jBNombreDocp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBcia)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBhosp, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBcons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox1)
                            .addComponent(jLNHC)
                            .addComponent(jLServicio)
                            .addComponent(jLNombreDoc))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBFijarServicio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBFijarNombres, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBApartar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBExtraer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                    	.addComponent(panelFinal)	
                        //.addComponent(botonExtraer)
                        //.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        //.addComponent(botonRegistrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
 
                       )) 
                        
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLNHC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Inicio.jBNHCp,javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLServicio)
                .addGap(1, 1, 1)
                .addComponent(Inicio.jBServiciop,javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLNombreDoc)
                .addGap(1, 1, 1)
                .addComponent(Inicio.jBNombreDocp,javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20,20,20)
                //.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBcia)
                    .addComponent(jBhosp)
                    .addComponent(jBcons))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBFijarServicio)
                    .addComponent(jBFijarNombres))
                .addGap(10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBEliminar)
                    .addComponent(jBApartar)
                    .addComponent(jBExtraer))
                .addGap(5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                	.addComponent(panelUtiles))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    //.addComponent(botonExtraer)
                    //.addComponent(botonRegistrar))
                	.addComponent(panelFinal))	
                //.addGap(10)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    	Inicio.ventanaIntroducirNHC= new InterfazIntroducirNHC(null,false, Inicio.jBNHCp);
		Inicio.ventanaIntroducirNHC.setVisible(true);
		requestFocus();
		new Acrobat().getFocus();
    }                                        
                             
                                        

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    	
    	if (jCheckBox1.isSelected()) {
			jList1.setModel(Inicio.excel.listaDocumentosDLM);
		} else if (!jCheckBox1.isSelected()) {
			jList1.setModel(listaNombres);
		}
    	
    }                                          

	private void jBApartarActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:

		Inicio.jBNHC.setText("Apartar");
		Inicio.jBNHCp.setText("Apartar");
		Inicio.jBServicio.setText("Apartar");
		Inicio.jBServiciop.setText("Apartar");
		Inicio.jBNombreDoc.setText("Apartar");
		Inicio.jBNombreDocp.setText("Apartar");
		Inicio.jBNombreDocp.setToolTipText(Inicio.jBNombreDocp.getText());
		Inicio.utiles.encajarNombreNormalizado(Inicio.jBNombreDoc.getText());

		Inicio.jBNHC.setBackground(Color.gray);
		Inicio.jBNHCp.setBackground(Color.gray);
		Inicio.jBServicio.setBackground(Color.gray);
		Inicio.jBServiciop.setBackground(Color.gray);
		Inicio.jBNombreDoc.setBackground(Color.gray);
		Inicio.jBNombreDocp.setBackground(Color.gray);

		requestFocus();
	}
    
	private void jBGrabarActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		jBGrabarPagina();
		requestFocus();
	}
	
	private void jBGrabarPagina() {
		new Acrobat().guardarPagina();

		revisarPropiedadesDocumento();

		System.out.println("Numero de pdf " + Inicio.numeroPdf
				+ ". Tamaño Carpeta: " + Inicio.tamañoCarpetaPdf);
		if (Inicio.numeroPdf < Inicio.tamañoCarpetaPdf - 1) {

			// File archivo = new
			// File(Inicio.rutaCompletaPdfs[++Inicio.numeroPdf]);
			Inicio.ventanaExplorador.listaPdfs
					.setSelectedIndex(Inicio.numeroPdf);

			File archivo = new File(
					Inicio.listaDocumentos[++Inicio.numeroPdf].rutaArchivo);
			Inicio.ventanaExplorador.listaPdfs
					.setSelectedIndex(Inicio.numeroPdf);

			try {
				// Process p = Runtime.getRuntime().exec(
				//		"rundll32 url.dll,FileProtocolHandler " + archivo);

				Desktop.getDesktop().open(archivo);
				
				Inicio.jBNHC
						.setText(Inicio.listaDocumentos[Inicio.numeroPdf].nhc);
				if (Inicio.listaDocumentos[Inicio.numeroPdf].nhc.equals("Separador")
						|| Inicio.listaDocumentos[Inicio.numeroPdf].nhc.contains("ERROR")
						|| Inicio.listaDocumentos[Inicio.numeroPdf].nhc
								.equals("NO")) {
					Inicio.jBNHC.setBackground(Color.red);
					Inicio.jBNHCp.setBackground(Color.red);
				} else if (Inicio.listaDocumentos[Inicio.numeroPdf].nhc
						.equals("Eliminar")
						|| Inicio.listaDocumentos[Inicio.numeroPdf].nhc
								.equals("Apartar")) {
					Inicio.jBNHC.setBackground(Color.GRAY);
					Inicio.jBNHCp.setBackground(Color.GRAY);
				} else if(Inicio.listaDocumentos[Inicio.numeroPdf].semaforoAmarilloNhc){
					Inicio.jBNHC.setBackground(Color.yellow);
					Inicio.jBNHCp.setBackground(Color.yellow);
				}
				else{
					Inicio.jBNHC.setBackground(Color.green);
					Inicio.jBNHCp.setBackground(Color.green);
				}
				
				if (Inicio.listaDocumentos[Inicio.numeroPdf].nhc
						.equals("Separador")
						&& !Inicio.listaDocumentos[Inicio.numeroPdf].servicio
								.equals("X")) {
					Inicio.jBNHC.setBackground(Color.green);
					Inicio.jBNHCp.setBackground(Color.green);
				}

				Inicio.jBServicio
						.setText(Inicio.listaDocumentos[Inicio.numeroPdf].servicio);
				if (Inicio.listaDocumentos[Inicio.numeroPdf].servicio
						.equals("X")) {
					Inicio.jBServicio.setBackground(Color.red);
					Inicio.jBServiciop.setBackground(Color.red);
				} else if (Inicio.listaDocumentos[Inicio.numeroPdf].servicio
						.equals("Eliminar")
						|| Inicio.listaDocumentos[Inicio.numeroPdf].servicio
								.equals("Apartar")) {
					Inicio.jBServicio.setBackground(Color.GRAY);
					Inicio.jBServiciop.setBackground(Color.GRAY);
				} else {
					Inicio.jBServicio.setBackground(Color.green);
					Inicio.jBServiciop.setBackground(Color.green);
				}

				Inicio.jBNombreDoc
						.setText(Inicio.listaDocumentos[Inicio.numeroPdf].nombreNormalizado);
				if (Inicio.listaDocumentos[Inicio.numeroPdf].nombreNormalizado
						.equals("X")) {
					Inicio.jBNombreDoc.setBackground(Color.red);
					Inicio.jBNombreDocp.setBackground(Color.red);
				} else if (Inicio.listaDocumentos[Inicio.numeroPdf].nombreNormalizado
						.equals("Eliminar")
						|| Inicio.listaDocumentos[Inicio.numeroPdf].nombreNormalizado
								.equals("Apartar")) {
					Inicio.jBNombreDoc.setBackground(Color.GRAY);
					Inicio.jBNombreDocp.setBackground(Color.GRAY);
				} else {
					Inicio.jBNombreDoc.setBackground(Color.green);
					Inicio.jBNombreDocp.setBackground(Color.green);
				}

				Inicio.jBNHCp
						.setText(Inicio.listaDocumentos[Inicio.numeroPdf].nhc);
				Inicio.jBServiciop
						.setText(Inicio.listaDocumentos[Inicio.numeroPdf].servicio);
				Inicio.jBNombreDocp
						.setText(Inicio.listaDocumentos[Inicio.numeroPdf].nombreNormalizado);

				if (Inicio.listaDocumentos[Inicio.numeroPdf].semaforoAmarilloServicio == true) {
					Inicio.jBServicio.setBackground(Color.yellow);
					Inicio.jBServiciop.setBackground(Color.yellow);
				}
				
				Inicio.utiles.encajarNombreNormalizado(Inicio.jBNombreDoc.getText());

				//   Actualiza al servicio del documento
 			   
 			   Inicio.jLServicios.setSelectedValue(Inicio.jBServicio.getText(), true);
 			   Inicio.jLNombresDoc.setModel(Inicio.excel.getDocServicio(Inicio.jLServicios
 						.getSelectedValue().toString()));				
				
				
				if (Inicio.listaDocumentos[Inicio.numeroPdf].nhc.equals("NO")
						|| Inicio.listaDocumentos[Inicio.numeroPdf].nhc
								.contains("ERROR")) {
					/*
					try {
						Robot robot = new Robot();
						robot.delay(1300);
					} catch (AWTException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					*/
					Inicio.ventanaIntroducirNHC = new InterfazIntroducirNHC(null,false, Inicio.jBNHCp);
					Inicio.ventanaIntroducirNHC.setVisible(true);

					// dialog.requestFocus();
					// jPanel1.requestFocus();
				}

			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

		} else {
			int registrar = JOptionPane.showConfirmDialog(Inicio.ventanaPrincipal, "Carpeta revisada. ¿Quieres registrar?");
			if(JOptionPane.OK_OPTION == registrar){
				Inicio.utiles.registraCambiosFinales();
			}
		}
		requestFocus();
	}
	
	void revisarPropiedadesDocumento() {
		if (!Inicio.listaDocumentos[Inicio.numeroPdf].nhc.equals(Inicio.jBNHCp
				.getText())) {
			// System.out.println("Cambiamos el nhc");
			Inicio.listaDocumentos[Inicio.numeroPdf].nhc = Inicio.jBNHCp
					.getText();
			Inicio.listaDocumentos[Inicio.numeroPdf].revisado = true;
		}
		if (!Inicio.listaDocumentos[Inicio.numeroPdf].servicio
				.equals(Inicio.jBServiciop.getText())) {
			// System.out.println("Cambiamos el servicio");
			Inicio.listaDocumentos[Inicio.numeroPdf].servicio = Inicio.jBServiciop
					.getText();
			Inicio.listaDocumentos[Inicio.numeroPdf].revisado = true;
		}
		if (!Inicio.listaDocumentos[Inicio.numeroPdf].nombreNormalizado
				.equals(Inicio.jBNombreDocp.getText())) {
			// System.out.println("Cambiamos el nombre del documento");
			Inicio.listaDocumentos[Inicio.numeroPdf].nombreNormalizado = Inicio.jBNombreDocp
					.getText();
			Inicio.listaDocumentos[Inicio.numeroPdf].revisado = true;
		}
		Inicio.listaDocumentos[Inicio.numeroPdf].semaforoAmarilloServicio = false;
	}
	
    
    protected void jBCarpetaActionPerformed(ActionEvent evt) {
		// TODO Auto-generated method stub
    	String cadena = "explorer.exe " + Inicio.carpetaActualRevisando;
		try {
			Runtime.getRuntime().exec(cadena);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private void renombraNombres(){
		for(int i=0;i < Inicio.separadores.size()-1;i++){
			if(Inicio.numeroPdf >= Inicio.separadores.get(i) && Inicio.numeroPdf < Inicio.separadores.get(i+1)){
				for(int j= Inicio.numeroPdf + 1; j < Inicio.separadores.get(i+1); j++){
					if( Inicio.listaDocumentos[j].nombreNormalizado != "X" && Inicio.listaDocumentos[j].nombreNormalizado != Inicio.jBNombreDoc.getText()){
						Inicio.listaDocumentos[j].semaforoAmarilloNombre = true;
					}
					Inicio.listaDocumentos[j].nombreNormalizado = Inicio.jBNombreDoc.getText();
					// Inicio.listaDocumentos[j].revisado = true;
					System.out.println("Modificando pdf numero " + j + " a " + Inicio.listaDocumentos[j].nombreNormalizado);
					
				}
			}
		}
	}
    
	private void renombraServicios(){
		for(int i=0;i < Inicio.separadores.size()-1;i++){
			if(Inicio.numeroPdf >= Inicio.separadores.get(i) && Inicio.numeroPdf < Inicio.separadores.get(i+1)){
				
				// AdivinaServicio.getServicio(Inicio.numeroPdf + 1, Inicio.separadores.get(i+1));
				
				for(int j= Inicio.numeroPdf + 1; j < Inicio.separadores.get(i+1); j++){
					if( Inicio.listaDocumentos[j].servicio != "X" && Inicio.listaDocumentos[j].servicio != Inicio.jBServicio.getText()){
						Inicio.listaDocumentos[j].semaforoAmarilloServicio = true;
					}

						//	Comprobamos si el servicio es anestesia para hacer el cambio anrc - carc
						if(Inicio.jBServicio.getText().equals(Inicio.ANRC)){
							if(Inicio.listaDocumentos[j].nombreNormalizado.equals(Inicio.EKG)){
								Inicio.listaDocumentos[j].servicio = Inicio.CARC;
							}
							else{
								Inicio.listaDocumentos[j].servicio = Inicio.jBServicio.getText();
							}
						}
				
						else if(Inicio.jBServicio.getText().equals(Inicio.ORLC)){
							if(Inicio.listaDocumentos[j].nombreNormalizado.equals(Inicio.EKG)){
								Inicio.listaDocumentos[j].nombreNormalizado = Inicio.VIDEONISTAGMOGRAFÍA;
							}
							Inicio.listaDocumentos[j].servicio = Inicio.jBServicio.getText();
						}

						else if(Inicio.jBServicio.getText().equals(Inicio.CIA)){
							if(Inicio.listaDocumentos[j].fisica.numPaginas > 2){
								Inicio.listaDocumentos[j].nombreNormalizado = "Quirófano";
							}
							Inicio.listaDocumentos[j].servicio = Inicio.jBServicio.getText();
						}
						
						else if(Inicio.jBServicio.getText().equals(Inicio.HOSP)){
							if(!Excepciones.excepcionesIngresos(j)){
								if(Inicio.listaDocumentos[j].fisica.numPaginas > 2 ){
									Inicio.listaDocumentos[j].nombreNormalizado = Inicio.HOSPITALIZACION;
								}
								Inicio.listaDocumentos[j].servicio = Inicio.HOSP;
							}
							
						}
						else if(Inicio.jBServicio.getText().equals(Inicio.DERC) || Inicio.jBServicio.getText().equals(Inicio.ETMC) ){
							if(Inicio.listaDocumentos[j].nombreNormalizado.equals("Enfermería quirúrgica")){
								Inicio.listaDocumentos[j].servicio = Inicio.CIA;
							}
						}
						
						else{
							Inicio.listaDocumentos[j].servicio = Inicio.jBServicio.getText();
						}
						
						
						// Inicio.listaDocumentos[j].revisado = true;
						System.out.println("Modificando pdf numero " + j + " a " + Inicio.listaDocumentos[j].servicio);
						
					}
			}
		}
	}	   
	
	public void habilitarTeclas(String texto) {
		if (texto.equals("Teclas On")) {
			String cmd = "taskkill.exe /F /IM FocoAcrobat.exe /T";
			String cmd2 = "taskkill.exe /F /IM FocoNHC.exe /T";
			String cmd3 = "taskkill.exe /F /IM FocoAcrobat2.exe /T";
			String cmd4 = "taskkill.exe /F /IM FocoAcrobatV.exe /T";
			String cmd5 = "taskkill.exe /F /IM FocoAcrobatV2.exe /T";
			
			Process hijo, hijo2, hijo3, hijo4, hijo5;
			try {
				hijo = Runtime.getRuntime().exec(cmd);

				hijo.waitFor();
				hijo2 = Runtime.getRuntime().exec(cmd2);

				hijo2.waitFor();
				
				hijo3 = Runtime.getRuntime().exec(cmd3);

				hijo3.waitFor();
				
				hijo4 = Runtime.getRuntime().exec(cmd4);
				hijo4.waitFor();
				
				hijo5 = Runtime.getRuntime().exec(cmd5);
				hijo5.waitFor();

				Thread.sleep(300);

			} catch (IOException e) {
				// System.out.println("Incapaz de matar.");
			} catch (InterruptedException e) {
				// System.out.println("Incapaz de matar.");
			}

			jBDeshabilitar.setText("Teclas Off");
			jBDeshabilitar.setBackground(Color.cyan);

		} else if (texto.equals("Teclas Off")) {

			File archivo2 = new File(Inicio.rutaFocoAcrobat);
			//	File archivo3 = new File(Inicio.rutaFocoNHC);
			try {
				Process p = Runtime.getRuntime().exec(
						"rundll32 url.dll,FileProtocolHandler " + archivo2);
			//	Process pNHC = Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + archivo3);

			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

			jBDeshabilitar.setText("Teclas On");
			jBDeshabilitar.setBackground(Color.pink);

		}
	}
	
	
    
	KeyListener listener = new KeyListener() {
		@Override
		public void keyTyped(KeyEvent e) {
			System.out.println("keyTyped="
					+ KeyEvent.getKeyText(e.getKeyCode()));
		}

		@Override
		public void keyPressed(KeyEvent e) {
			System.out.println("keyPressed="
					+ KeyEvent.getKeyText(e.getKeyCode()));
		}

		@Override
		public void keyReleased(KeyEvent e) {

			System.out.println(e.getKeyText(e.getKeyCode()));
			System.out.println(e.getKeyCode());
			
			
			switch (e.getKeyCode()) {
			case KeyEvent.VK_W:
				
				if(Inicio.ventanaIntroducirNHC != null){
        			Inicio.ventanaIntroducirNHC.dispose();
        		}
				/*
	   			 if(Inicio.listaDocumentos[Inicio.numeroPdf].nhc.equals("NO") || Inicio.listaDocumentos[Inicio.numeroPdf].nhc.contains("ERROR")){
	   				   
	    	           try {
						Robot robot = new Robot();
						robot.delay(100);
						
		    	           Inicio.ventanaIntroducirNHC = new InterfazIntroducirNHC(null, true, Inicio.jBNHCp);
		    	           Inicio.ventanaIntroducirNHC.setVisible(true);
		    	           		    	           
		    	   		if (!Inicio.listaDocumentos[Inicio.numeroPdf].nhc.equals(Inicio.jBNHCp
		    					.getText())) {
		    				// System.out.println("Cambiamos el nhc");
		    				Inicio.listaDocumentos[Inicio.numeroPdf].nhc = Inicio.jBNHCp
		    						.getText();
		    				Inicio.listaDocumentos[Inicio.numeroPdf].revisado = true;
		    			}
		    	           
	    	           } catch (AWTException ev) {
						// TODO Auto-generated catch block
						ev.printStackTrace();
	    	           }

	    	           
	    	           //dialog.requestFocus();
	    	           // jPanel1.requestFocus();
    			   }
	   			 else{
	   			 */
	 	   			jBGrabarPagina(); 
	 	   			
	 	   			
	   			 /* } */

				break;
			case KeyEvent.VK_R:
				
				// System.out.println("Hola estoy pulsando la r en la ventana compacta");
				
				new Acrobat().rotarPagina();
				if ((Inicio.jBServicio.getText().equals(Inicio.CARC) || Inicio.jBServicio
						.getText().equals(Inicio.ANRC))
						&& Inicio.jBNombreDoc.getText().equals("X")) {
					// if(Inicio.listaDocumentos[Inicio.numeroPdf].fisica.numPaginas
					// <= 2){
					Inicio.jBNombreDocp.setText(Inicio.EKG);
					Inicio.jBNombreDocp.setToolTipText(Inicio.jBNombreDocp.getText());
					Inicio.utiles.encajarNombreNormalizado(Inicio.jBNombreDoc.getText());
					Inicio.jBNombreDoc.setText(Inicio.EKG);
					Inicio.jBServiciop.setText(Inicio.CARC);
					Inicio.jBServicio.setText(Inicio.CARC);
					Inicio.jBNombreDocp.setBackground(Color.green);
					Inicio.jBNombreDoc.setBackground(Color.green);
					// }
				}
				break;
			case KeyEvent.VK_E:
				new Acrobat().eliminarPagina();
				break;
			case KeyEvent.VK_Q:
				
				System.out.println("Hola estoy pulsando la q en la ventana compacta");
				
				if(Inicio.ventanaIntroducirNHC != null){
					Inicio.ventanaIntroducirNHC.dispose();
				}
				
				
				Inicio.ventanaIntroducirNHC = new InterfazIntroducirNHC(null,true, Inicio.jBNHCp);
				Inicio.ventanaIntroducirNHC.setVisible(true);
				break;
				
  			case KeyEvent.VK_SPACE:  
  				System.out.println("Hola estoy pulsando la barra espaciadora en la ventana compacta");
  				
  				if(Inicio.ventanaIntroducirNHC != null){
  	  				Inicio.ventanaIntroducirNHC.validarNHC(Inicio.ventanaIntroducirNHC.jBNHCAnterior.getText());
  	  				Inicio.ventanaIntroducirNHC.dispose();
  	  				new FocalAdobe(100);
  	  				break;	
  				}
  			/*	
  			case KeyEvent.VK_0:
  			case KeyEvent.VK_1:
  			case KeyEvent.VK_2:
  			case KeyEvent.VK_3:
  			case KeyEvent.VK_4:
  			case KeyEvent.VK_5:
  			case KeyEvent.VK_6:
  			case KeyEvent.VK_7:
  			case KeyEvent.VK_8:
  			case KeyEvent.VK_9:
 				String cadena = Inicio.ventanaIntroducirNHC.jTFnhc.getText();
  				cadena += e.getKeyText(e.getKeyCode());
  				Inicio.ventanaIntroducirNHC.jTFnhc.setText(cadena);
  				break;
  				
  			case KeyEvent.VK_NUMPAD0:
  			case KeyEvent.VK_NUMPAD1:
  			case KeyEvent.VK_NUMPAD2:
  			case KeyEvent.VK_NUMPAD3:
  			case KeyEvent.VK_NUMPAD4:
  			case KeyEvent.VK_NUMPAD5:
  			case KeyEvent.VK_NUMPAD6:
  			case KeyEvent.VK_NUMPAD7:
  			case KeyEvent.VK_NUMPAD8:
  			case KeyEvent.VK_NUMPAD9:
  				String cadenaBloqNum = Inicio.ventanaIntroducirNHC.jTFnhc.getText();
  				String cadenaExtraida = e.getKeyText(e.getKeyCode());
  				cadenaBloqNum += cadenaExtraida.substring(7);
  				Inicio.ventanaIntroducirNHC.jTFnhc.setText(cadenaBloqNum);
  				break;
  				
  			*/	
			case KeyEvent.VK_ESCAPE: /* cerrarAutoHotKey() */
				;
				break;
			}

			// if(e.getKeyCode() == KeyEvent.VK_A )

			// System.out.println("keyReleased="+KeyEvent.getKeyText(e.getKeyCode()));
		}
	};
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaA3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaA3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaA3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaA3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaA3(true).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     

    private javax.swing.JButton jBcia;
    private javax.swing.JButton jBhosp;
    private javax.swing.JButton jBcons;
    private javax.swing.JButton jBFijarServicio;
    private javax.swing.JButton jBFijarNombres;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLNHC;
    private javax.swing.JLabel jLServicio;
    private javax.swing.JLabel jLNombreDoc;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    
    private JButton jBExtraer;
    private JButton jBApartar;
    private JButton jBEliminar;
    private JButton jBGrabar;
    
    private JPanel panelFinal;
    
    DefaultListModel listaNombres;
    // End of variables declaration                   
}