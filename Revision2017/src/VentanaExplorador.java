import java.awt.AWTException;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Point;
import java.awt.Robot;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;

import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.filechooser.FileNameExtensionFilter;

import es.mgamallo.firma.VentanaDialogoSinFileChooser;

public class VentanaExplorador extends javax.swing.JFrame {

    private JMenuItem jMenuItem11;

	private JMenuItem jMenuItem12;

	private JMenuItem jMenuItem13;

	private JMenu jMenu9;

	private JMenuItem jMenuItem14;
	/**
     * Creates new form VentanaExplorador
     */
    public VentanaExplorador() {
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

 
                
        jScrollPane1 = new javax.swing.JScrollPane();
        listaPdfs = new javax.swing.JList();
        
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();					//	Carpeta		
        jMenu9 = new javax.swing.JMenu("Revisar");
        
        
        jMenuFirmar = new JMenu();
        jMenuItemFirmar = new JMenuItem("Firmar");
        
        jMenuItem1 = new javax.swing.JMenuItem();			//	Abrir Carpeta	
        jMenuItem11 = new javax.swing.JMenuItem();			//	Ventana horizontal
        jMenuItem14 = new javax.swing.JMenuItem();			//	Ventana vertical
        jMenuItem12 = new javax.swing.JMenuItem();			//	Revisar A3
        jMenuItem13 = new javax.swing.JMenuItem();			//	Escribir sólo NHC
        
        
        jMenuItem2 = new javax.swing.JMenuItem();			//	Consultar Carpeta
        jSeparadorVigo = new javax.swing.JSeparator();
        jMenuItemVigo = new javax.swing.JMenuItem();		//	Abrir carpeta Vigo
        jSeparadorU = new javax.swing.JSeparator();
        jMenu5 = new javax.swing.JMenu("Dudas");			//	Dudas
        jMenuItem51 = new javax.swing.JMenuItem("Enviar a Dudas");				//	Enviar a Dudas
        jMenuItem52 = new javax.swing.JMenuItem("Abrir carpeta Dudas");				//	Abrir carpeta Dudas
        jMenuItem54	= new JMenuItem("Consultar carpeta Dudas");						//	Consultar carpeta dudas
        jMenuItem53 = new javax.swing.JMenuItem("Enviar a Asociados");				//	Enviar a Asociados

        jSeparadorM = new javax.swing.JSeparator();
        jMenu2 = new javax.swing.JMenu();					//	Incidencias
        jMenuItem23 = new javax.swing.JMenuItem("Apartar pdf");					//	Apartar pdf
        jSeparadorD = new javax.swing.JSeparator();

        jMenuItem3 = new javax.swing.JMenuItem();					//	Cerrar sesión
        jMenuItem22 = new javax.swing.JMenuItem("Ya subidas");					//	Ya subidas
        jSeparador01 = new JSeparator();
        jSeparador02 = new JSeparator();

        jMenuItem31 = new javax.swing.JMenuItem();			//	Guardar carpetas
        jMenuItem32 = new javax.swing.JMenuItem();			//	Guardar preferencias
        jMenuItem33 = new javax.swing.JMenuItem();			//	Guardar todo
        
        jMenuV = new JMenu("Ayuda");																	//	Documentos
        jMenuItemV1 = new JMenuItem("Resetea nombres");		
        jMenuItemV1.setEnabled(true);					//	Por Servicio
        jMenuItemV2 = new JMenuItem("Ayuda");	jMenuItemV2.setEnabled(true);					//	Por palabra clave
       // jMenuItemV3 = new JMenuItem("Por nombre del documento");			jMenuItemV3.setEnabled(true);	//	Por nombre del documento
        
        
        jMenuCalibre = new JMenu("Calibrar");				//	Menu Calibrar
        jMenuItemCon = new JMenuItem("Consulta");			//	Solo coordenadas consultas
        jMenuItemIng = new JMenuItem("Ingr/Urg/Rx");		//	Solo coordenadas Ingresos
        jMenuItemCma = new JMenuItem("CMA");				//	Solo coordenadas CMA
        jMenuItemAn	 = new JMenuItem("Doc. Anulados");		//	Solo coordenadas Doc. Anulados
        
        jMenuNormas = new JMenu("Documentos");						//	Menu Normas
        jMenuItemServicio = new JMenuItem("Listado Normas");
     //   jMenuItemTodas = new JMenuItem("Todas");
        jSeparadorV = new JSeparator();

        jMenuAñadirNormas = new JMenu("Añadir");
        jMenuItemAñadirDocumentos = new JMenuItem("Documentos Nuevos");
        jSeparador03 = new JSeparator();
        jMenuItemAñadirAvisos = new JMenuItem("Avisos");
        jMenuItemAñadirModelos = new JMenuItem("Modelo Nuevo");
        jMenuItemAñadirNormas = new JMenuItem("Normas Nuevas");

        jSeparador04 = new JSeparator();
        jMenuModificar = new JMenu("Modificar");
        jMenuItemModifModelos = new JMenuItem("Modelos");
        
        jMenuCrono = new JMenu("!");
        jMenuItemCrono = new JMenuItem("Reloj");
        jMenuItemEstadistica = new JMenuItem("Estadistica");
        
        jLabel1 = new javax.swing.JLabel();
        etiquetaVacia = new javax.swing.JLabel();
        
                
 
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        
        jMenu1.setText("Carpeta");
        jMenuItem1.setText("Abrir Carpeta");
        jMenuItem1.setToolTipText("Añade el nombre del usuario a la carpeta seleccionada");
        
        jMenu1.add(jMenu9);
        
        jMenu9.add(jMenuItem11);
        jMenu9.add(jMenuItem14);
        jMenu9.add(jMenuItem12);
        jMenu9.add(jMenuItem13);
        
        jMenuItem11.setText("Ventana Horizontal");
        jMenuItem14.setText("Ventana Vertical");
        jMenuItem12.setText("A3");
        jMenuItem13.setText("Sólo NHC");
        
        //	Ventana horizontal
        jMenuItem11.addActionListener(
        		new ActionListener(){
        			public void actionPerformed(ActionEvent evento){
        				//	Menú horizontal
        				Inicio.menuVertical = false;
        				Inicio.A3 = false;
        				Inicio.visualizacion = 0;
        				abrirCarpetaConVisualizacion(evento,0);
        				
        			}
	        });
        //	Ventana vertical
        jMenuItem14.setEnabled(true);
        jMenuItem14.addActionListener(
        		new ActionListener(){
        			public void actionPerformed(ActionEvent evento){
        				//	Menú vertical
        				Inicio.menuVertical = true;
        				Inicio.visualizacion = 1;
        				Inicio.A3 = false;
        				abrirCarpetaConVisualizacion(evento,1);
        			}
	        });
        
        
        jMenuItem12.setEnabled(true);
        jMenuItem12.addActionListener(
        		new ActionListener(){
        			public void actionPerformed(ActionEvent evento){
        				//	Menú A3
        				Inicio.menuVertical = true;
        				Inicio.visualizacion = 2;
        				Inicio.A3 = true;
        				abrirCarpetaConVisualizacion(evento,2);
        			}
	        });
        
        
        jMenuItem13.setEnabled(false);
        jMenuItem13.addActionListener(
        		new ActionListener(){
        			public void actionPerformed(ActionEvent evento){
        				//	Menú sólo NHC
        				Inicio.menuVertical = true;
        				Inicio.A3 = false;
        				abrirCarpetaConVisualizacion(evento,3);
        			}
	        });
        
        
     jMenuItem2.setVisible(false);
        jMenuItem2.setText("Consultar Carpeta");
        jMenuItem2.setToolTipText("No añade el nombre del usuario a la carpeta seleccionada");
        jMenuItem2.addActionListener(
	       		new ActionListener(){

					@Override
					public void actionPerformed(ActionEvent arg0) {
						// TODO Auto-generated method stub
						
					}
	       		
	    				    			
	        });
        
 
        
        
        
        jMenuItem51.setEnabled(false);        
        jMenuItem51.setToolTipText("Envia un pdf a la carpeta Dudas");
        jMenuItem52.setEnabled(true);
        jMenuItem52.setToolTipText("Abre la carpeta Dudas personal. \n Elimina automáticamente las observaciones de los pdfs");
        jMenuItem54.setToolTipText("Abre la carpeta Dudas personal. \n No elimina las observaciones de los pdfs");
        if(!dudasResueltas)
        	jMenuItem53.setEnabled(false);
        jMenuItem53.setToolTipText("Al cerrar sesión, envía el contenido de dudas a la carpeta asociados");
         
        
        jMenu2.setText("Incidencias");
        jMenu2.setEnabled(false);
        jMenu2.add(jMenuItem23);jMenuItem23.setEnabled(true);
        
 
      
        jMenuItem31.setText("Guardar Carpetas");
        jMenuItem32.setText("Guardar Preferencias");
        jMenuItem33.setText("Guardar Todo");
        
        jMenuItem3.setText("Cerrar Sesión");

        jMenuItem3.setEnabled(true);
        
        jMenuItem3.addActionListener(new ActionListener(){			//	Guardar preferencias
        	public void actionPerformed(ActionEvent evento){
        		if(Inicio.ventanaRevisionAbierta){
            	//	Inicio.coordenadas.grabarCoordenadas();
        		}

        		
        		CerrarTodo cerrar = new CerrarTodo();
        		cerrar.close();
        		System.exit(0);
        	}
        	
        });
        
 

        
        jMenuV.add(jMenuItemV2);
     //   jMenuItemV2.setEnabled(false);
        jMenuItemV2.addActionListener(new ActionListener(){				//	Visor por Metadatos
        	public void actionPerformed(ActionEvent arg0){
            		Inicio.utiles.habilitarTeclas(Inicio.jBDeshabilitar.getText(),Inicio.visualizacion);
           		 Inicio.ventanaAyuda.setVisible(true);

        	}
        });
        
        
        jMenuV.add(jMenuItemV1);
     //   jMenuItemV2.setEnabled(false);
        jMenuItemV1.addActionListener(new ActionListener(){				//	Resetea nombre de los pdfs
        	public void actionPerformed(ActionEvent arg0){
            	try{
            		Inicio.utiles.habilitarTeclas(Inicio.jBDeshabilitar.getText(),Inicio.visualizacion);

            	}catch(Exception e){
            		
            	}
            		
            		boolean eligeDirectorio = false;
            		
            		String ruta =Inicio.RUTA; 
            		String rutaCarpeta = ""; 
            		if(Inicio.destinoDocumentacion == 0){
            			ruta = Inicio.RUTAURG;
            	    }
            		else if(Inicio.destinoDocumentacion >= 2 ){
            			System.out.println(Inicio.RUTASAL);
            			ruta = Inicio.RUTASAL;
            		}
            		
            		JFileChooser explorador = new JFileChooser();
            		
            		explorador.setDialogTitle("Abrir carpeta...");

            		if(Inicio.destinoDocumentacion == 0){
            				String cadenaUsuario = "\\01 " + Inicio.usuario + "\\01 Escaneado";
            				ruta += cadenaUsuario;
            				System.out.println(cadenaUsuario);
            				explorador.setDialogTitle("Abrir carpeta escaneado de... " + Inicio.usuario);
            		}

            		explorador.setCurrentDirectory(new File(ruta));
            		explorador.setFileFilter(new FileNameExtensionFilter("Documentos PDF","pdf"));
            		explorador.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            		
            		int seleccion = explorador.showOpenDialog(null);
            		
            		if( seleccion == JFileChooser.APPROVE_OPTION){			
            				eligeDirectorio = true;
            		}
            		else{
            			eligeDirectorio = false;
            		}
            			
            		boolean errores = false;
            		if (eligeDirectorio){
            			rutaCarpeta = explorador.getSelectedFile().toString();
            			System.out.println("Empecemos por aqui " + rutaCarpeta);
            			
            			File pdfs[] = new File(rutaCarpeta).listFiles(new FilenameFilter() {
							
							@Override
							public boolean accept(File dir, String name) {
								// TODO Auto-generated method stub
								return name.toLowerCase().endsWith(".pdf");
							}
						});
            			
            			for(int i=0;i<pdfs.length;i++){
            				String nombreNuevo = pdfs[i].getAbsolutePath();
            				System.out.println(nombreNuevo);
            				int index = pdfs[i].getAbsolutePath().lastIndexOf("\\");
            				nombreNuevo = nombreNuevo.substring(0,index + 22) + ".pdf";
            				System.out.println(nombreNuevo);
            				boolean error = pdfs[i].renameTo(new File(nombreNuevo));
            				if (!error){
            					errores = true;
            				}
            			}
            			
            			if(errores){
            				JOptionPane.showMessageDialog(null, "Renombrado finalizado con errores. Revisa la carpeta");
            			}
            			else{
            				JOptionPane.showMessageDialog(null, "Renombrado finalizado con exito.");
            			}
            		}
        	}
        });
        
        
        
 
        jMenuFirmar.setText("Firmar");
        jMenuFirmar.add(jMenuItemFirmar);
        jMenuItemFirmar.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				
				
			try {
					
					String tipoUsuario = "documentacion";
					
					if(Inicio.destinoDocumentacion == 0){
						tipoUsuario = "urgencias";
					}
					else if(Inicio.destinoDocumentacion >= 2){
						tipoUsuario = "salnés";
					}
					
					String comando = "java -jar FirmaArchivo.jar " + Inicio.usuario 
							+ " " + tipoUsuario;
					
					System.out.println(comando);
					
					Runtime.getRuntime().exec(comando);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			CerrarTodo cerrar = new CerrarTodo();
    		cerrar.close();
    		System.exit(0);
			
			//	new VentanaDialogo(Inicio.usuario, Inicio.documentacionDeUrgencias);
			}
			
		});

        
        
        jMenuNormas.add(jMenuItemServicio); jMenuItemServicio.setEnabled(true);
        jMenuItemServicio.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				//new TablaNormas();
			}
        	
        });
    //    jMenuNormas.add(jMenuItemTodas); jMenuItemTodas.setEnabled(false);
        jMenuNormas.add(jSeparadorV);
        jMenuNormas.add(jMenuAñadirNormas);
        
        jMenuAñadirNormas.add(jMenuItemAñadirDocumentos);
        jMenuAñadirNormas.add(jSeparador03);
        jMenuAñadirNormas.add(jMenuItemAñadirAvisos);
        jMenuAñadirNormas.add(jMenuItemAñadirModelos);
        jMenuAñadirNormas.add(jMenuItemAñadirNormas);
        
        	jMenuItemAñadirModelos.setEnabled(false);
        	jMenuItemAñadirNormas.setEnabled(false);
        	jMenuItemAñadirDocumentos.setEnabled(false);
        	jMenuItemModifModelos.setEnabled(false);
        
        
        
 
        
        jMenuItemAñadirAvisos.addActionListener(new ActionListener(){			//	Menu añadir avisos
        	public void actionPerformed(ActionEvent evento){
        		// new VentanaNormas();    
        		// new VentanaAñadirAvisos();
        	}
        });
        
        jMenuItemAñadirDocumentos.addActionListener(new ActionListener(){			//	Menu añadir avisos
        	public void actionPerformed(ActionEvent evento){
        		// new VentanaNormas();    
        		// new VentanaAñadirDocumentos("Documento");
        	}
        });  
        
        jMenuItemAñadirModelos.addActionListener(new ActionListener(){			//	Menu añadir Modelos nuevos de documentos
        	public void actionPerformed(ActionEvent evento){
        		// new VentanaNormas();    
        		// new VentanaAñadirDocumentos("Inicio.modelo");
        	}
        });
        
        jMenuItemAñadirNormas.addActionListener(new ActionListener(){			//	Menu añadir normas
        	public void actionPerformed(ActionEvent evento){
        		// new VentanaNormas();    
        		// new VentanaAñadirMensajes();
        	}
        });
        
        jMenuNormas.add(jSeparador04);
        jMenuNormas.add(jMenuModificar);
        jMenuModificar.add(jMenuItemModifModelos);
        jMenuItemModifModelos.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				// new InterfazVisorMetaAñadir();
				// System.out.println(Inicio.auxRutaImagen);
				// new VentanaModificarDocumentos("Inicio.modelo");
			}
        	
        });

        
        jMenuCrono.add(jMenuItemCrono);
        jMenuCrono.add(jMenuItemEstadistica);
        
        jMenuItemCrono.addActionListener(new ActionListener(){			//	Menu crono
        	public void actionPerformed(ActionEvent evento){
        		// new VentanaCrono();        		
        	}
        });
        

               
        jScrollPane1.setViewportView(listaPdfs);
                        
        // jMenu1.add(jMenuItem1);			//	Abrir carpeta
        // jMenu1.add(jMenuItem2);			//	Consultar carpeta
        // jMenu1.add(jSeparadorVigo);
        //jMenu1.add(jMenuItemVigo);		//	Abrir carpeta Vigo
        // jMenu1.add(jSeparadorU);
        
     //   if(Inicio.documentacion) 
        	jMenu1.add(jMenu5);				//	Menú dudas
        	
        
        jMenuFirmar.setText("Firmar");	
        jMenuFirmar.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				try {
					
					String tipoDeDocumentacion = "documentacion";
					
					if(Inicio.destinoDocumentacion == 0){
						tipoDeDocumentacion = "urgencias";
					}else if(Inicio.destinoDocumentacion == 2){
						tipoDeDocumentacion = "salnés";
					}
					
					String comando = "java -jar FirmaArchivo.jar " + Inicio.usuario 
							+ " " + tipoDeDocumentacion;
					
					Runtime.getRuntime().exec(comando);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		});
        
        	
    jMenu5.setVisible(false);
        jMenu5.add(jMenuItem51);			//	Enviar a Dudas
        jMenu5.add(jSeparador02);
        jMenu5.add(jMenuItem52);			//	Abrir carpeta dudas
        jMenu5.add(jMenuItem54);			//	Consultar carpeta dudas
        jMenu5.add(jMenuItem53);			//	Enviar a Asociados

        //jMenu1.add(jSeparadorM);
        jMenu1.add(jMenu2);				//	Incidencias
     jMenu2.setVisible(false);
        jMenu1.add(jSeparadorD);
        jMenu1.add(jMenuItem3);				//	Cerrar
     jMenuItem3.setVisible(true);   
        
        jMenuBar1.add(jMenu1);
        jMenuBar1.add(jMenuFirmar);
        jMenuBar1.add(jMenuV);
        jMenuV.setVisible(true);
        
        jMenuBar1.add(jMenuNormas);
        jMenuNormas.setVisible(false);
        
        jMenuBar1.add(jMenuCalibre);  
        jMenuCalibre.setVisible(false);
        jMenuBar1.add(jMenuCrono);
        jMenuCrono.setVisible(false);
        
        jLabel1.setForeground(Color.BLUE);

        setJMenuBar(jMenuBar1);
        
        
        
        listaPdfs.addMouseListener(new MouseAdapter(){
        	public void mouseClicked(MouseEvent evt){
       		
        		int pdfNumero = listaPdfs.getSelectedIndex();
        		numArchivo = pdfNumero;
        		Inicio.numeroPdf = numArchivo;
        		int tamañoLista = listaPdfs.getModel().getSize();

        		if(Inicio.menuVertical){
    				Inicio.ventanaIntegral.listaPdfs.setSelectedIndex(Inicio.numeroPdf);
    			}
        		
        		if(Inicio.ventanaIntroducirNHC != null){
        			Inicio.ventanaIntroducirNHC.dispose();
        		}
        		
        		// File archivo = new File(Inicio.rutaCompletaPdfs[pdfNumero]);
        		File archivo = new File(Inicio.listaDocumentos[pdfNumero].rutaArchivo);

        		try{
        			
        			new Acrobat().guardarPagina();
        		/*	
    			   Process p = Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + archivo);
        		*/
        			
        			Desktop.getDesktop().open(archivo);
        			
        			
        			
        			Inicio.jBNHC.setEnabled(true);
        			Inicio.jBNHCp.setEnabled(true);
        			Inicio.jBServicio.setEnabled(true);
        			Inicio.jBServiciop.setEnabled(true);
        			Inicio.jBNombreDoc.setEnabled(true);
        			Inicio.jBNombreDocp.setEnabled(true);
        			
    			   Inicio.jBNHC.setText(Inicio.listaDocumentos[numArchivo].nhc);
    			   if(Inicio.listaDocumentos[numArchivo].nhc.equals("Separador") &&
    					   !Inicio.listaDocumentos[numArchivo].servicio.equals("X")){
    				   Inicio.jBNHC.setBackground(Color.green);
    				   Inicio.jBNHCp.setBackground(Color.green);
    			   }
    			   else if(Inicio.listaDocumentos[numArchivo].nhc.equals("Separador") || Inicio.listaDocumentos[numArchivo].nhc.contains("ERROR") ||
    					   Inicio.listaDocumentos[numArchivo].nhc.equals("NO")){
    				   Inicio.jBNHC.setBackground(Color.red);
    				   Inicio.jBNHCp.setBackground(Color.red);
    			   }
    			   else if(Inicio.listaDocumentos[numArchivo].nhc.equals("Eliminar") ||
    					   Inicio.listaDocumentos[numArchivo].nhc.equals("Apartar")){
    				   Inicio.jBNHC.setBackground(Color.GRAY);
    				   Inicio.jBNHCp.setBackground(Color.GRAY);
    			   }else{
    				   Inicio.jBNHC.setBackground(Color.green);
    				   Inicio.jBNHCp.setBackground(Color.green);
    			   }
    			   
    			   Inicio.jBServicio.setText(Inicio.listaDocumentos[numArchivo].servicio);
    			   if(Inicio.listaDocumentos[numArchivo].servicio.equals("X") ){
    				   Inicio.jBServicio.setBackground(Color.red);
    				   Inicio.jBServiciop.setBackground(Color.red);
    			   }
    			   else if(Inicio.listaDocumentos[numArchivo].servicio.equals("Eliminar") ||
    					   Inicio.listaDocumentos[numArchivo].servicio.equals("Apartar") ){
    				   Inicio.jBServicio.setBackground(Color.GRAY);
    				   Inicio.jBServiciop.setBackground(Color.GRAY);
    			   }
    			   else{
    				   Inicio.jBServicio.setBackground(Color.green);
    				   Inicio.jBServiciop.setBackground(Color.green);
    			   }
 
    			   
    			   Inicio.jBNombreDoc.setText(Inicio.listaDocumentos[numArchivo].nombreNormalizado);
     			   if(Inicio.listaDocumentos[numArchivo].nombreNormalizado.equals("X") ){
    				   Inicio.jBNombreDoc.setBackground(Color.red);
    				   Inicio.jBNombreDocp.setBackground(Color.red);
    			   }
     			   else if(Inicio.listaDocumentos[numArchivo].nombreNormalizado.equals("Eliminar") ||
     					  Inicio.listaDocumentos[numArchivo].nombreNormalizado.equals("Apartar")){
	   				   Inicio.jBNombreDoc.setBackground(Color.GRAY);
	   				   Inicio.jBNombreDocp.setBackground(Color.GRAY);
	   			   }
    			   else{
    				   Inicio.jBNombreDoc.setBackground(Color.green);
    				   Inicio.jBNombreDocp.setBackground(Color.green);
    			   }
    			   
    			   Inicio.jBNHCp.setText(Inicio.listaDocumentos[numArchivo].nhc);
    			   Inicio.jBServiciop.setText(Inicio.listaDocumentos[numArchivo].servicio);
    			   Inicio.jBNombreDocp.setText(Inicio.listaDocumentos[numArchivo].nombreNormalizado);
    			   Inicio.jBNombreDocp.setToolTipText(Inicio.jBNombreDocp.getText());
    			   Inicio.utiles.encajarNombreNormalizado(Inicio.jBNombreDoc.getText());
    			   
    			   if(Inicio.listaDocumentos[Inicio.numeroPdf].semaforoAmarilloServicio == true){
    				   Inicio.jBServicio.setBackground(Color.yellow);
    				   Inicio.jBServiciop.setBackground(Color.yellow);
    			   }
    			   
    			   if(Inicio.listaDocumentos[Inicio.numeroPdf].semaforoAmarilloNhc == true){
    				   Inicio.jBNHC.setBackground(Color.yellow);
    				   Inicio.jBNHCp.setBackground(Color.yellow);
    			   }
    			   
    			   //   Actualiza al servicio del documento
    			   
    			   Inicio.jLServicios.setSelectedValue(Inicio.jBServicio.getText(), true);
    			   Inicio.jLNombresDoc.setModel(Inicio.excel.getDocServicio(Inicio.jLServicios
    						.getSelectedValue().toString()));
    			   
    			   if(Inicio.listaDocumentos[Inicio.numeroPdf].nhc.equals("NO") || Inicio.listaDocumentos[Inicio.numeroPdf].nhc.contains("ERROR")){
   				   
	    	           try {
						Robot robot = new Robot();
						//robot.delay(1300);
	    	           } catch (AWTException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
	    	           }
	    	           Inicio.ventanaIntroducirNHC = new InterfazIntroducirNHC(null, false, Inicio.jBNHC);
	    	           Inicio.ventanaIntroducirNHC.setVisible(true);
	    	           
	    	           //dialog.requestFocus();
	    	           // jPanel1.requestFocus();
    			   }
    			   
    			   //	Actualiza la fecha del pdf
 
    			   String fecha = Inicio.listaDocumentos[Inicio.numeroPdf].fecha;
    			   System.out.println("Fecha registrada... " + fecha);
    			   
    			   
    			   if(!fecha.equals("")){
    				   Inicio.ventanaFechas.jLfechaRegistrada.setText(fecha);
    				   Inicio.jLServicio.setText(fecha);

    			   }
    			   else{
    				   Inicio.ventanaFechas.jLfechaRegistrada.setText(Inicio.ventanaFechas.getFechaActiva());
    				   Inicio.jLServicio.setText("Sin fecha");
    			   }
    		   
       //			Desktop.getDesktop().open(archivo);
        			Robot robot = new Robot();
        			robot.delay(400);
        			//new Acrobat().getFocus();
        			
        		}catch (Exception e) {
        			System.out.println(e);
        		}
        /*		if((numArchivo+1<tamañoLista)){
        			numArchivo++;
        			listaPdfs.setSelectedIndex(numArchivo);
            		File archivo2 = new File(Inicio.rutaCompletaPdfs[numArchivo]);
            		try{
 //           			Desktop.getDesktop().open(archivo2);
            			
           			    Process p = Runtime.getRuntime()
    					        .exec("rundll32 url.dll,FileProtocolHandler " + archivo2);
            			
            			Robot robot = new Robot();
            			robot.delay(400);
            			//	Ajusta los documentos horizontalmente
        				robot.keyPress(KeyEvent.VK_CONTROL);
        				robot.keyPress(KeyEvent.VK_SHIFT);
        				robot.keyPress(KeyEvent.VK_K);
        				robot.keyRelease(KeyEvent.VK_K);
        				robot.keyRelease(KeyEvent.VK_SHIFT);
        				robot.keyRelease(KeyEvent.VK_CONTROL);
            			
            			
            		}catch (Exception e) {
            			System.out.println(e);
            		}
        			
        		}
         */
        	}
        });

                
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
        );

        pack();
        setVisible(true);
        
        
 //////////////////////   Borrrarrrr
  /*      
        Inicio.ventanaPrincipal = new VentanaPrincipal();
        Inicio.ventanaCompacta = new VentanaCompacta();
      //  Inicio.ventanaPrincipal.setBounds(Inicio.coordenadas.coordenadas[3].x, Inicio.coordenadas.coordenadas[3].y, 750, 650);
        Inicio.ventanaPrincipal.setBounds(Inicio.coordenadas.coordenadas[3].x, Inicio.coordenadas.coordenadas[3].y, 750, 1000);
        Inicio.ventanaCompacta.setBounds(Inicio.coordenadas.coordenadas[2].x, Inicio.coordenadas.coordenadas[2].y, 750, 180);
      
        Inicio.ventanaMicro = new VentanaMicro();
        Inicio.ventanaMicro.setBounds(Inicio.coordenadas.coordenadas[5].x, Inicio.coordenadas.coordenadas[5].y, 730, 60);
    */    
       // setSize(500,700);
        
    }// </editor-fold>

/*
    public boolean dudasContestadas(String user){
    	String ruta = Inicio.RUTA;

		if(!(new File(ruta).exists())){
			ruta = Inicio.RUTAB;
		}
		File ficherosDudas = new File(ruta);
		if(ficherosDudas.exists()){
    		int ind = ruta.lastIndexOf("/");
    		String aux = ruta;
    		aux= ruta.substring(0, ind);
    		aux+= "/99 Dudas/" + Inicio.usuario + " C";
    	//	System.out.println(aux);
    		ficherosDudas = new File(aux);
    		if(ficherosDudas.exists()){
      					return true;
    		}
   		}
		
    	
    	return false;
    }
*/
    
 
    
    public void cerrarAutoHotKey(){
    	    	
  		if(Inicio.jBDeshabilitar != null && Inicio.jBDeshabilitar.getText().equals("Teclas On")){
  			String cmd = "taskkill.exe /F /IM FocoAcrobat.exe /T";
  			String cmd3 = "taskkill.exe /F /IM FocoAcrobat2.exe /T";
  			String cmdNHC = "taskkill.exe /F /IM FocoNHC.exe /T";
  			
  			Process hijo, hijo2, hijo3;
  			 try {
 				hijo = Runtime.getRuntime().exec(cmd);
 				hijo.waitFor();
 				
 				hijo3 = Runtime.getRuntime().exec(cmd3);
 				hijo3.waitFor();
 				
 				hijo2 = Runtime.getRuntime().exec(cmdNHC);
 				hijo2.waitFor();
  				
 				Thread.sleep(300);
 
	 		 } catch (IOException e) {
	 			//System.out.println("Incapaz de matar.");
	 		 } catch (InterruptedException e) {
	 			//System.out.println("Incapaz de matar.");
	 		 }
  			
  			 
  			Inicio.jBDeshabilitar.setText("Teclas Off");
  			Inicio.jBDeshabilitar.setBackground(Color.cyan);
  			
  		}

  	}
    
    
    
    public void copiarFichero(File f1, File f2){
    	
    	if(!f2.exists()){
    	  	try {
    			InputStream in = new FileInputStream(f1);
    			OutputStream out = new FileOutputStream(f2);
    			
    			byte[] buffer = new byte[1024];
    			int len;
    			
    			while((len = in.read(buffer))>0){
    				out.write(buffer,0,len);
    			}
    			
    			in.close();
    			out.close();
    			
    		} catch (FileNotFoundException e) {
    			// TODO Auto-generated catch block
    			e.printStackTrace();
    		} catch (IOException e) {
    			// TODO Auto-generated catch block
    			e.printStackTrace();
    		}
    	}
  	
    }
    
    
	public void renombraURG(){
		//System.out.println("Renombrando servicios a urgencias");
		for(int i=0;i < Inicio.tamañoCarpetaPdf;i++){
				Inicio.listaDocumentos[i].servicio = Inicio.URG;
			}
	}
    
    
    private void abrirCarpetaConVisualizacion(ActionEvent evento, int visualizacion){
		
    	/*
    	 * 	visualización:	0	Menú grande
    	 * 					1	Menú vertical
    	 * 					2	Menú A3
    	 * 					3	Menú sólo NHC
    	 */
    	
    	
    	
    	VentanaExplorador.triggerVigo = false;
		
	//	VentanaInicioProgreso vp = new VentanaInicioProgreso();
		//vp.setVisible(false);
		 
		CargaListaPdfs pdfs = new CargaListaPdfs(true);
		
		//vp.setVisible(true);
		
		
		if(pdfs.cargado == true){
			
			int tamaño = pdfs.nombrePdfs.length;
			tamañoLista = tamaño;
			int aux = pdfs.ficheros.length;
			/*
			 Inicio.modelo = new DefaultListModel();
			Inicio.modelo.addElement("Cargando...");
			listaPdfs.setModel(Inicio.modelo);
			*/
			
	
			
			VentanaProgreso vprogreso = new VentanaProgreso(pdfs, visualizacion);
			
			jMenuItemV2.setEnabled(true);
		}
    }
	
	
	
    // Variables declaration - do not modify
    static javax.swing.JList listaPdfs;

    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenu jMenu5; 
    
    private javax.swing.JSeparator jSeparadorVigo;
    private javax.swing.JMenuItem jMenuItemVigo;
    
    private JMenu jMenuV;
    private JMenuItem jMenuItemV1;
    private JMenuItem jMenuItemV2;
  //  private JMenuItem jMenuItemV3;
    private JSeparator jSeparadorV;
    private JMenuItem jMenuItemV4;
    
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JSeparator jSeparadorU;
    private javax.swing.JSeparator jSeparadorM;
    private javax.swing.JSeparator jSeparador01;
    private javax.swing.JSeparator jSeparador02;
    private javax.swing.JSeparator jSeparador03;
   
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuItem51;
    private javax.swing.JMenuItem jMenuItem52;
    private javax.swing.JMenuItem jMenuItem53;
    private javax.swing.JMenuItem jMenuItem54;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem23;   
    private javax.swing.JSeparator jSeparadorD;
    private javax.swing.JMenuItem jMenuItem31;
    private javax.swing.JMenuItem jMenuItem32;
    private javax.swing.JMenuItem jMenuItem33;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel etiquetaVacia;
    
    private JMenu jMenuFirmar;
    private JMenuItem jMenuItemFirmar;
    
    private JMenu jMenuCalibre;
    private JMenuItem jMenuItemCon;
    private JMenuItem jMenuItemIng;
    private JMenuItem jMenuItemCma;
    private JMenuItem jMenuItemAn;
    
    private JMenu jMenuNormas;
    private JMenuItem jMenuItemServicio;
    private JMenuItem jMenuItemTodas;
    private JMenu jMenuAñadirNormas;
    private JMenuItem jMenuItemAñadirNormas;
    private JMenuItem jMenuItemAñadirDocumentos;
    private JMenuItem jMenuItemAñadirModelos; 
    private JMenuItem jMenuItemAñadirAvisos;
    
    private javax.swing.JSeparator jSeparador04;
    private javax.swing.JMenu jMenuModificar;
    private javax.swing.JMenuItem jMenuItemModifModelos;
    
    private JMenu jMenuCrono;
    private JMenuItem jMenuItemCrono;
    private JMenuItem jMenuItemEstadistica;
    
    
    private Object[] objetoPuente; 
    
    
	String[] rutaCompletaPdfs;
	static int numArchivo=0;
	static int tamañoLista=0;
	
	boolean dudasResueltas = false;
	
	String[] nombresUsuales = new String[5]; 

	static boolean triggerVigo = false;
	static final int POVISA = 0;
	static final int UVigo = 1;
	
	String carpetaAbierta = "";				//	Carpeta povisa, para crear carpetaEspejo
	static boolean errorData = false;
    // End of variables declaration
}


class VentanaInicioProgreso extends JFrame{
	
	JPanel panel = new JPanel(new FlowLayout());
	JLabel etiqueta1 = new JLabel("Paciencia... \n");
	JLabel etiqueta2 = new JLabel(" Procesando...");
	
	VentanaInicioProgreso(){
		setSize(200,75);
		panel.setBackground(Color.pink);
		setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
		
		panel.add(etiqueta1);
		panel.add(etiqueta2);
		getContentPane().add(panel);
		
		setLocationRelativeTo(null);
		
		setVisible(true);
	}
}

